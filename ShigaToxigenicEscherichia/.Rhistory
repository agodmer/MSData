merge_p= apply(res_1[,3:ncol(res_1)],2,function(x)return(metap::sumlog(as.numeric(x))$p))
})
#Max vote
res_1=res[res$name==lr[i],3:ncol(res_1)]
Max1 = apply(data.frame(res_1), 1, function(x) replace(as.numeric(x), which.max(x), 1))
Max2 = apply(Max1, 2, function(x) replace(x, x<1, 0))
VoteTot = ncol(Max2)
Votedecompte = apply(Max2, 1, sum)
Votedecompte2 = Votedecompte/VoteTot
mat_vote = Votedecompte2
#####"
#votes=table(unlist(apply(res_1,1,function(x){return(which(as.numeric(x)==max(as.numeric(x))))})))
#vote_max=which(as.numeric(votes)==max(as.numeric(votes)))
#mat_vote=rep(0,ncol(res_1))
#mat_vote[which(as.numeric(votes)==max(as.numeric(votes)))]=1
#mat_vote=mat_vote/sum(mat_vote)
res=rbind(res,c(lr[i],"comb_fisher",merge_p))
res=rbind(res,c(lr[i],"max_vote",mat_vote))
}
}
}
#Add a column indicating the predicted category
pred_cat=NULL
for (i in 1:nrow(res)){
pred_cat=c(pred_cat,colnames(res)[3:ncol(res)][which.max(res[i,3:ncol(res)])])
}
res=cbind(res,pred_cat)
colnames(res)[ncol(res)]="pred_max_p"
## Statistcs for analysis
## For models
if (is.null(Reference) == FALSE && length(unique(as.character(Reference))) > 1){
df_methods <- split.data.frame(res, res$method)
suppressWarnings({
RefT = factor(make.names(Reference))
Model_prediction <- lapply(df_methods, function(x) factor((x[,"pred_max_p"]), levels = levels(RefT)))
#Model_prediction <- Model_prediction[names(Model_prediction) %in% c("max_vote", "comb_fisher") == FALSE]
Confusion.Matrix <- lapply(Model_prediction, function(x) try(caret::confusionMatrix(x, RefT), silent = TRUE))
Confusion.MatrixT <- lapply(Confusion.Matrix, function(x) if(is.character(x) == FALSE){x<-x})
Confusion.MatrixT <- Confusion.MatrixT[!sapply(Confusion.MatrixT,is.null)]
Confusion.Matrix = Confusion.MatrixT
})
## More adapted Warning
#n.levels <- as.numeric(sapply(Model_prediction, nlevels))
#n.levelsRef <- as.numeric(nlevels(RefT))
#cond.num <- sum(as.numeric(n.levels%in%n.levelsRef))
#if(cond.num <=1){message("Be careful, at least one model is not able to predict certain classes")}
Df.classif <- lapply(df_methods, function(x) try(cbind.data.frame(Reference = make.names(Reference), x), silent = TRUE))
Df.classif <- Df.classif[!sapply(Df.classif,is.character)]
DiscordTable <- lapply(Df.classif, function(x) x[which(x[,"Reference"]!= x[,"pred_max_p"]),])
#table for discordances strains
#Discordances.strain <- lapply(DiscordTable, function(x) table(x$name))
#Discordances.strains <- reshape2::melt(Discordances.strain, id.vars = NULL)
ConfMat.df <- lapply(Confusion.Matrix, function(x) data.frame(x[["table"]]))
Discord2 <- lapply(ConfMat.df, function(x) x[which(x[,1]!= x[,2]),])
Incor.Classification <- lapply(Discord2, function(x) x[which(x[,3]>=1),])
# Incorrect classification with frequencies
suppressMessages(Incorrect.ClassificationFreq <- try(reshape2::melt(Incor.Classification)[,-3], silent = TRUE))
if(is.character(Incorrect.ClassificationFreq)){Incorrect.ClassificationFreq <- Incorrect.ClassificationFreq[!sapply(Incorrect.ClassificationFreq,is.character)]}
if(is.character(Incorrect.ClassificationFreq)){Incorrect.ClassificationFreq <- t(data.frame(c(0,0,0,0)))}
colnames(Incorrect.ClassificationFreq) <- c("Prediction", "Reference", "Frequence", "Model")
ConcordTable <- lapply(Df.classif, function(x) x[which(x[,"Reference"]== x[,"pred_max_p"]),])
#table for concordances strains
#Concordances.strain <- lapply(DiscordTable, function(x) table(x$name))
#Concordances.strains <- reshape2::melt(Concordances.strain, d.vars = NULL)
Cor.Classification <- lapply(ConfMat.df, function(x) x[which(x[,1] == x[,2]),])
Cor.Classification <- lapply(Cor.Classification, function(x) x[which(x[,3]>0),])
# Correct classification with frequencies
suppressMessages(Correct.ClassificationFreq <- reshape2::melt(Cor.Classification)[,-3])
colnames(Correct.ClassificationFreq) <- c("Prediction", "Reference", "Frequence", "Model")
# Statistics
Global.stat <- lapply(Confusion.Matrix, function(x) (x[["overall"]]))
Global.stats <- do.call("data.frame", Global.stat)
Statistic.param = row.names(Global.stats)
Global.stats <- reshape2::melt(Global.stat, id.vars = NULL)
Global.stats <- data.frame(Global.stats, Statistic.param)
Details.stat <- try(lapply(Confusion.Matrix, function(x) cbind.data.frame(x[["byClass"]], "Class" = row.names(x[["byClass"]]))), silent = TRUE)
suppressMessages(Details.stats <- try(reshape2::melt(Details.stat), silent = TRUE))
## If only two classes
if(is.character(Details.stat)){
Details.stat2 <-lapply(Confusion.Matrix, function(x) cbind.data.frame(x[["byClass"]], "Class" = x[["positive"]]))
suppressMessages(Details.stats2 <- cbind.data.frame(reshape2::melt(Details.stat2)))
colnames(Details.stats2) <- c("Class", "Statistic.parameter", "Value", "Model")
Details.stats2$Statistic.parameter <- row.names(data.frame(Details.stat2[1]))
Details.stats = Details.stats2
}
# Other statistics
## Matthew Correlation for mulitclass
MatthewCorrelation.dfa <- lapply(Model_prediction, function(x) mltools::mcc(x, RefT))
MatthewCorrelation.dfb <- do.call("cbind.data.frame", MatthewCorrelation.dfa)
MatthewCorrelation.df <- cbind.data.frame(value = as.numeric(MatthewCorrelation.dfb[1,]), L1 = colnames(MatthewCorrelation.dfb) , Statistic.param = "MatthewCorrelation")
## Adjusted Rank Index for mulitclass
AdjustedRank.Index.dfa <- lapply(Model_prediction, function(x)  mclust::adjustedRandIndex(x, RefT))
AdjustedRank.Index.dfb <- do.call("cbind.data.frame", AdjustedRank.Index.dfa)
AdjustedRank.Index.df <- cbind.data.frame(value = as.numeric(AdjustedRank.Index.dfb[1,]), L1 = colnames(AdjustedRank.Index.dfb), Statistic.param = "AdjustedRank.Index")
## Table for values
Global.stats <- rbind.data.frame(Global.stats, MatthewCorrelation.df, AdjustedRank.Index.df)
colnames(Global.stats) <- c("Value", "Model", "Statistic.parameter")
KeepStats <- c("Accuracy", "Kappa", "MatthewCorrelation", "AdjustedRank.Index")
Global.stats <-  Global.stats[Global.stats$Statistic.parameter %in% KeepStats, ]
rownames(Global.stats) = NULL
## List for results
results = list(Prob.results = res,
Confusion.Matrix = Confusion.Matrix,
Global.stats = Global.stats,
Details.stats = Details.stats,
#Discordances.strains = Discordances.strains,
#Concordances.strains = Concordances.strains,
Correct.ClassificationFreq = Correct.ClassificationFreq,
Incorrect.ClassificationFreq = Incorrect.ClassificationFreq)
} else {results = res}
if (is.null(Reference) == TRUE && length(unique(as.character(Reference)))){message("At least two categories are to be compared in peaks object to estimate the statistics")}
return(results)
}
prob_cat=PredictLogReg2(peaks = peaks[c(1:5)],
model = list(model_lm$train_mod,model_nn$train_mod,model_rf$train_mod,
model_xgb$train_mod,model_svm$train_mod),
moz = sel_moz,
tolerance = 0.00000000000001,
toleranceStep = 0.0001,
Reference = Y[1:5])
knitr::opts_chunk$set(echo = TRUE)
A <- url("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
A
test <- readr::read_csv(A)
urlfile<-"https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv"
dsin<-read.csv(urlfile)
A <- url("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
test <- readr::read_delim(A)
A <- ("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
test <- readr::read_delim(A)
#install.package("RCurl") #installation du package
library("RCurl") # chargement des donction
library("rio")
test <- import(A)
A <- ("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
library(curl)
x <- read.csv(curl(A))
A <- ("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
A <- ("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
## Utilisation de la fonction import
A <- ("https://raw.githubusercontent.com/agodmer/MSData/310c13236359932a82bfa3ef56446cbf7f72bf9e/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
x <- readr::read_csv(url(A))
x
knitr::opts_chunk$set(echo = TRUE)
#install.package("readr") #installation du package
library("readr") # chargement des fonctions
# (i) Téléchargement de la matrice d'intensité
## utilisation de la fonction url pour ouvrir ou fermer une connection
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristner.tsv")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
knitr::opts_chunk$set(echo = TRUE)
#install.package("readr") #installation du package
library("readr") # chargement des fonctions
#install.package("readr") #installation du package
library("readr") # chargement des fonctions
# (i) Téléchargement de la matrice d'intensité
## utilisation de la fonction url pour ouvrir ou fermer une connection
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristner.tsv")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
# (ii) Téléchargement des métadata associées
urlfileMetadata <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
## Utilisation de la fonction read_tsv
MetadataMatrixShigatox <- read_csv(urlfileMetadata)
## table dimension
dim(IntensityMatrixShigatox)
knitr::opts_chunk$set(echo = TRUE)
#install.package("readr") #installation du package
library("readr") # chargement des fonctions
# (i) Téléchargement de la matrice d'intensité
## utilisation de la fonction url pour ouvrir ou fermer une connection
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristner.tsv")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
# (ii) Téléchargement des métadata associées
urlfileMetadata <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
## Utilisation de la fonction read_tsv
MetadataMatrixShigatox <- read_csv(urlfileMetadata)
## table dimension
dim(IntensityMatrixShigatox)
## table dimension
dim(MetadataMatrixShigatox)
## Unlist the data in a signe vector
Hist.data <- unlist(IntensityMatrixShigatox)
## Plot hist (ugly graph)
hist(Hist.data)
## Beatutiful plot
## Install packages
#install.packages(c("FactoMineR", "factoextra"))
## load
library("FactoMineR")
library("factoextra")
## Easy PCA no scale
res.pca.raw <- PCA(IntensityMatrixShigatox, scale.unit = FALSE, graph = FALSE)
## Plot variance results
fviz_eig(res.pca.raw, addlabels = TRUE, ylim = c(0, 100))
## Easy PCA no scale
res.pca.scale <- PCA(IntensityMatrixShigatox, scale.unit = TRUE, graph = FALSE)
## Plot variance results
fviz_eig(res.pca.scale, addlabels = TRUE, ylim = c(0, 100))
## Plot PCA
fviz_pca_ind(res.pca.scale ,
geom.ind = "point", # show points only (nbut not "text")
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
var <- get_pca_var(res.pca)
var <- get_pca_var(res.pca.scale)
var
head(var$contrib, 4)
head(var$contrib, 10)
var$cos2
max(var$contrib[,1])
max(var$contrib)
Results <- sort(mvar$contrib, mvar$contrib[,1])
Results <- sort(var$contrib, var$contrib[,1])
Results <- sort(var$contrib)
Results <- var$contrib
View(Results)
fviz_pca_var(res.pca.scale, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
# Contributions des variables à PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Contributions des variables à PC1
fviz_contrib(res.pca.scale, choice = "var", axes = 1, top = 10)
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 10)
fviz_contrib(res.pca.scale, choice = "var", axes = 1:2, top = 10)
fviz_contrib(res.pca.scale, choice = "var", axes = 1:2, top = 50)
fviz_contrib(res.pca.scale, choice = "var", axes = 1:3, top = 3)
fviz_contrib(res.pca.scale, choice = "var", axes = 1:3, top = 30)
fviz_contrib(res.pca.scale, choice = "var", axes = 2:3, top = 30)
fviz_pca_biplot(res.pca.scale, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
fviz_pca_biplot (res.pca.scale,
col.ind = MetadataMatrixShigatox$Toxigenic_status, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
fviz_pca_biplot (res.pca.raw,
col.ind = MetadataMatrixShigatox$Toxigenic_status, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 10)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 100)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 30)
sp <- importTab("C:/Users/alexa/Dropbox/Spectra/Datasets_example_spectra/Shigella_coli")
require(MSclassifR)
require(MALDIquant)
require(mixOmics)
require(MALDIquantForeign)
require(ggplot2)
require(knitr)
require(stringr)
require(dplyr)
require(caret)
require(MALDIrppa)
#################################################################################
## E.coli and Shigella
## https://datadryad.org/stash/dataset/doi:10.5061%2Fdryad.bq64j
# https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0101924
sp <- importTab("C:/Users/alexa/Dropbox/Spectra/Datasets_example_spectra/Shigella_coli")
MSclassifR::PlotSpectra(sp[[3]])
## Load metadata
file_sp <-sapply(sp, function(x)metaData(x)$file)#Names of files
Spot <-sapply(sp, function(x)metaData(x)$Spot)
row_col<-list()
upik<-list()
for (i in 1:length(file_sp)){
row_col[[i]]<-stringr::str_split(file_sp[[i]], stringr::fixed("\\"), simplify = TRUE)
}
setwd("C:/Users/alexa/OneDrive/Bureau/Respository Git Hub/MSData/ShigaToxigenicEscherichia")
Metadata.full <- do.call("rbind.data.frame",row_col)
V10Meta <- stringr::str_split(Metadata.full$V10, stringr::fixed("_"), simplify = TRUE)
Spot <- stringr::str_split(V10Meta[,4], stringr::fixed("."), simplify = TRUE)[,1]
MetadataShigatoxChristner <- cbind.data.frame("Toxigenic_status" = V10Meta[,2],
"id_number" = c(1:length(sp)),
"Strain_number" = V10Meta[,3],
"spot" = Spot,
"type_of_extraction" = V10Meta[,1]
)
spectra <- MSclassifR::SignalProcessing(sp)
peaks <- MSclassifR::PeakDetection(spectra, SNRdetection = 3, labels = MetadataShigatoxChristner$id_number)
#peaks2 <- MALDIquant::filterPeaks(peaks, minFrequency = 0)
IntMat <- MALDIquant::intensityMatrix(peaks)
## Rows are named according to selected metadata
rownames(IntMat) <-  paste(MetadataShigatoxChristner$Strain_number,MetadataShigatoxChristner$id_number, sep = ".")
## Remove "NA" in the intensityMatrix
IntMat[is.na(IntMat)] <- 0
## Normalise peaks according to the maximum intensity
## Create basic function
norma<-function(x) x/(max(x))
## Apply this function
IntMat <- apply(IntMat,1,norma)
X <- t(IntMat)
RawIntensityMatrix <- X
readr::write_tsv(RawIntensityMatrixChristner, file = "RawIntensityMatrixChristnerSN3.tsv")
RawIntensityMatrixChristner <- cbind.data.frame(RawIntensityMatrix)
readr::write_tsv(RawIntensityMatrixChristner, file = "RawIntensityMatrixChristnerSN3.tsv")
knitr::opts_chunk$set(echo = TRUE)
#install.package("readr") #installation du package
library("readr") # chargement des fonctions
# (i) Téléchargement de la matrice d'intensité
## utilisation de la fonction url pour ouvrir ou fermer une connection
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristnerSN3")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
# (i) Téléchargement de la matrice d'intensité
## utilisation de la fonction url pour ouvrir ou fermer une connection
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristnerSN3")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristnerSN3")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristner")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
urlfileMatrix <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/RawIntensityMatrixChristnerSN3.tsv")
## Utilisation de la fonction read_tsv
IntensityMatrixShigatox <- read_tsv(urlfileMatrix)
urlfileMetadata <- url("https://raw.githubusercontent.com/agodmer/MSData/main/ShigaToxigenicEscherichia/MetadataShigatoxChristner.csv")
## Utilisation de la fonction read_tsv
MetadataMatrixShigatox <- read_csv(urlfileMetadata)
## table dimension
dim(IntensityMatrixShigatox)
## table dimension
dim(MetadataMatrixShigatox)
## Unlist the data in a signe vector
Hist.data <- unlist(IntensityMatrixShigatox)
## Plot hist (ugly graph)
hist(Hist.data)
## Install packages
#install.packages(c("FactoMineR", "factoextra"))
## load
library("FactoMineR")
library("factoextra")
## Easy PCA no scale
res.pca.raw <- PCA(IntensityMatrixShigatox, scale.unit = FALSE, graph = FALSE)
## Plot variance results
fviz_eig(res.pca.raw, addlabels = TRUE, ylim = c(0, 100))
## Plot PCA
fviz_pca_ind(res.pca.raw,
geom.ind = "point", # show points only (nbut not "text")
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 10)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 10)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 15)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 30)
fviz_pca_var(res.pca.raw, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
res.desc <- dimdesc(res.pca.raw, axes = c(1,2), proba = 0.05)
# Description de la dimension 1
res.desc$Dim.1
res.desc <- dimdesc(res.pca.raw, axes = c(1,2), proba = 0.01)
# Description de la dimension 1
res.desc$Dim.1
res.desc <- dimdesc(res.pca.raw, axes = c(1,2), proba = 0.01)
# Description de la dimension 1
res.desc$Dim.2
?fviz_pca_ind
## Plot PCA
#### Axes 2 et 3
fviz_pca_ind(res.pca.raw,
geom.ind = "point", # show points only (nbut not "text")
axes = c(2, 3)
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
## Plot PCA
#### Axes 2 et 3
fviz_pca_ind(res.pca.raw,
geom.ind = "point", # show points only (nbut not "text")
axes = c(2, 3),
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
## Plot PCA
#### Axes 2 et 3
fviz_pca_ind(res.pca.raw,
geom.ind = "point", # show points only (nbut not "text")
axes = c(3, 4),
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
## Plot PCA
#### Axes 2 et 3
fviz_pca_ind(res.pca.raw,
geom.ind = "point", # show points only (nbut not "text")
axes = c(2, 3),
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 30)
fviz_pca_biplot (res.pca.raw,
col.ind = MetadataMatrixShigatox$Toxigenic_status, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
fviz_contrib(res.pca.raw, choice = "var", axes = 1:2, top = 10)
## Easy PCA no scale
res.pca.scale <- PCA(IntensityMatrixShigatox, scale.unit = TRUE, graph = FALSE)
## Plot variance results
fviz_eig(res.pca.scale, addlabels = TRUE, ylim = c(0, 100))
## Plot PCA
fviz_pca_ind(res.pca.scale,
geom.ind = "point", # show points only (nbut not "text")
col.ind = MetadataMatrixShigatox$Toxigenic_status, # color by groups
palette = c("blue", "red", "green", "black"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_contrib(res.pca.scale, choice = "var", axes = 1:2, top = 10)
fviz_pca_var(res.pca.scale, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
fviz_pca_biplot (res.pca.scale,
col.ind = MetadataMatrixShigatox$Toxigenic_status, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
library(readxl)
DatasetsNotes <- read_excel("C:/Users/alexa/OneDrive/Bureau/DatasetsNotes.xlsx")
View(DatasetsNotes)
library(readxl)
DatasetsNotes <- read_excel("C:/Users/alexa/OneDrive/Bureau/DatasetsNotes.xlsx")
View(DatasetsNotes)
names <- DatasetsNotes$...1
DatasetsNotes = DatasetsNotes[,-1]
row.names(DatasetsNotes) = names
View(DatasetsNotes)
plot(DatasetsNotes)
ggpubr::ggpaired(DatasetsNotes)
ggpubr::ggpar(DatasetsNotes)
X<- reshape2::DatasetsNotes
X<- reshape2::melt(DatasetsNotes)
ggpubr::ggpar(X)
ggpubr::ggpaired(X)
library(GGally)
ggpairs(X)
ggpairs(DatasetsNotes)
ggpairs(DatasetsNotes,  aes(color = colnames(X),  # Color by group (cat. variable)
alpha = 0.5))
colnames(X)
ggpairs(DatasetsNotes,  aes(color = colnames(DatasetsNotes),  # Color by group (cat. variable)
alpha = 0.5))
ggpairs(DatasetsNotes,  aes(color = row.names(DatasetsNotes),  # Color by group (cat. variable)
alpha = 0.5))
ggpairs(X,  aes(color = variable,  # Color by group (cat. variable)
alpha = 0.5))
DatasetsNotes
ggpairs(DatasetsNotes)
View(DatasetsNotes)
ggpubr::ggpaired(X$variable)
ggpairs(DatasetsNotes)
library(readxl)
DatasetsNotes <- read_excel("C:/Users/alexa/OneDrive/Bureau/DatasetsNotes.xlsx")
View(DatasetsNotes)
names <- DatasetsNotes$...1
DatasetsNotes = DatasetsNotes[,-1]
row.names(DatasetsNotes) = names
plot(DatasetsNotes)
ggpubr::ggpar(DatasetsNotes)
X<- reshape2::melt(DatasetsNotes)
ggpubr::ggpaired(X$variable)
library(GGally)
ggpairs(DatasetsNotes)
ggpairs(t(DatasetsNotes))
t(DatasetsNotes)
ggpairs(t(DatasetsNotes))
ggpairs(data.frame(t(DatasetsNotes)))
apply(DatasetsNotes,1,summary)
apply(DatasetsNotes,2,summary)
## Easy PCA no scale
res.pca.raw <- PCA(DatasetsNotes, scale.unit = FALSE, graph = FALSE)
## Plot variance results
fviz_eig(res.pca.raw, addlabels = TRUE, ylim = c(0, 100))
apply(DatasetsNotes,1,summary)
Mean_notes <- apply(DatasetsNotes,1,mean)
Resulats <- ifelse(Mean_notes > 10, "admis", "rattrapage")
fviz_pca_biplot (res.pca.raw,
col.ind = Resulats, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
## Plot variance results
fviz_eig(res.pca.raw, addlabels = TRUE, ylim = c(0, 100))
fviz_pca_var(res.pca.raw, col.var = "black")
fviz_pca_var(res.pca.raw, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
var <- get_pca_var(res.pca.raw)
var
library("corrplot")
corrplot(var$cos2, is.corr=FALSE)
